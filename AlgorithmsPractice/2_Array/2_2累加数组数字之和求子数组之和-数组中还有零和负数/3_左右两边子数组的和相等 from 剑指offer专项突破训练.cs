/*
    题目
    输入一个整数数组,如果一个数字的左边的字数组的数字之和等于右边的子数组的数字之和,那么返回该数字的下标.如果存在多个这个这样的数字,则返回最左边一个数字下标
    如果不存在,则返回-1.
    例如,数组[1,7,3,6,2,9],下标为3的数字(值为6)的左边3个数字1,7,3的和与右边两个狮子2和9的和相等,都是11,因此输出为3
*/

/*
    分析
    这也是一道关于子数组的题,假设从头到尾扫描数组中的每个数字,当扫描到第i个数字时,它左边的子数组数字之和就是从第1个数字到dii-1个数字之和,它右边子数组之和是从i+1到最后一个数字之和,
    这个和等于数组中所有数字之和减去的第1个数字到第i个数字之和
    如果从数组的第1个数字开始扫描并逐一累加扫描到的数字,当扫描到第i个数字时,就可以知道累加到第i个数字的和,这个和减去i就是累加到i-1的和,同时要知道所有数字之和,从头到尾扫描一遍就行
*/

namespace AlgorithmsPractice
{
    //  有两个时间复杂度为O(n)的循环,所以最终时间复杂度也为O(n).函数只用了若干临时变量,没有使用哈希表数组之类的辅助,空间复杂度为O(1)
    static partial class AlgorithmBo
    {
        static internal int PivotIndex(int[] nums)
        {
            int total = 0;
            foreach (int num in nums)   // 循环遍历,算出所有数字之和
                total += num;
            
            int sum = 0;
            for (int i = 0; i < nums.Length; ++i)   // 然后遍历每个数字,判断它的左右是否满足题目条件
            {
                sum += nums[i];
                if (sum - nums[i] == total - sum)
                    return i;
            }

            return -1;
        } 
    }
}